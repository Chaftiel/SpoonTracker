# Azure DevOps Pipeline for Spoon Tracker App
trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
  paths:
    exclude:
    - README.md
    - docs/*
    - '*.md'

pr:
  branches:
    include:
    - main
    - develop

variables:
  # Configuration globale
  azureSubscription: 'Azure-ServiceConnection'
  appName: 'spoontracker'
  location: 'West Europe'
  
  # Variables par environnement
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    environment: 'prod'
    resourceGroupName: 'rg-spoontracker-prod'
    appServiceSku: 'B1'
    deploymentSlot: 'production'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    environment: 'dev'
    resourceGroupName: 'rg-spoontracker-dev'
    appServiceSku: 'F1'
    deploymentSlot: 'staging'
  ${{ else }}:
    environment: 'feature'
    resourceGroupName: 'rg-spoontracker-feature'
    appServiceSku: 'F1'
    deploymentSlot: 'staging'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Validate
  displayName: 'Validation et Tests'
  jobs:
  - job: ValidateCode
    displayName: 'Validation du Code'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    
    - script: |
        echo "=== Validation du projet Spoon Tracker ==="
        echo "Branche: $(Build.SourceBranchName)"
        echo "Environnement: $(environment)"
        echo "Build ID: $(Build.BuildId)"
      displayName: 'Informations de build'
    
    - script: |
        npm install -g html-validate eslint
        echo "Validation HTML..."
        html-validate src/index.html || echo "⚠️ Avertissements HTML détectés"
        
        echo "Validation JavaScript basique..."
        node -c src/scripts/app.js || exit 1
        
        echo "✅ Validation terminée"
      displayName: 'Validation syntaxique'
      continueOnError: true

- stage: Build
  displayName: 'Build Application'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: BuildApp
    displayName: 'Build et Package'
    steps:
    - script: |
        echo "Building Spoon Tracker Application"
        echo "Target Environment: $(environment)"
        mkdir -p $(Build.ArtifactStagingDirectory)/app
        mkdir -p $(Build.ArtifactStagingDirectory)/infrastructure
      displayName: 'Prepare build directories'
    
    # Copier les fichiers de l'application
    - task: CopyFiles@2
      displayName: 'Copy application files'
      inputs:
        SourceFolder: 'src'
        Contents: |
          **/*.html
          **/*.css
          **/*.js
          **/*.json
          **/*.ico
          **/*.png
          **/*.jpg
          **/*.gif
        TargetFolder: '$(Build.ArtifactStagingDirectory)/app'
    
    # Copier web.config
    - task: CopyFiles@2
      displayName: 'Copy web.config'
      inputs:
        SourceFolder: '.'
        Contents: 'web.config'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/app'
    
    # Copier les fichiers d'infrastructure
    - task: CopyFiles@2
      displayName: 'Copy infrastructure files'
      inputs:
        SourceFolder: 'infrastructure'
        Contents: '**/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/infrastructure'
    
    # Inject build variables into HTML
    - task: replacetokens@5
      displayName: 'Inject build variables'
      inputs:
        rootDirectory: '$(Build.ArtifactStagingDirectory)/app'
        targetFiles: '**/*.html'
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        enableTelemetry: true
        variables: |
          BUILD_ID: $(Build.BuildId)
          ENVIRONMENT: $(environment)
          BRANCH_NAME: $(Build.SourceBranchName)
    
    # Publier les artefacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish App Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/app'
        ArtifactName: 'SpoonTrackerApp-$(environment)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Infrastructure Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/infrastructure'
        ArtifactName: 'Infrastructure-$(environment)'

- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployInfra
    displayName: 'Deploy Azure Resources'
    pool:
      vmImage: 'windows-latest'
    environment: '$(environment)'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'Infrastructure-$(environment)'
          
          - task: AzurePowerShell@5
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: '$(azureSubscription)'
              ScriptType: 'InlineScript'
              Inline: |
                $rgName = "$(resourceGroupName)"
                $location = "$(location)"
                
                Write-Host "🏗️ Checking Resource Group: $rgName"
                
                $rg = Get-AzResourceGroup -Name $rgName -ErrorAction SilentlyContinue
                if (-not $rg) {
                  Write-Host "Creating Resource Group: $rgName in $location"
                  New-AzResourceGroup -Name $rgName -Location $location -Tag @{
                    Environment = "$(environment)"
                    Application = "SpoonTracker"
                    CreatedBy = "AzureDevOps"
                    BuildId = "$(Build.BuildId)"
                    Branch = "$(Build.SourceBranchName)"
                  }
                  Write-Host "✅ Resource Group created successfully"
                } else {
                  Write-Host "✅ Resource Group already exists"
                }
              azurePowerShellVersion: 'LatestVersion'
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy ARM Template'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(azureSubscription)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(resourceGroupName)'
              location: '$(location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/Infrastructure-$(environment)/arm-templates/main.json'
              overrideParameters: |
                -appName "$(appName)"
                -environment "$(environment)"
                -sku "$(appServiceSku)"
                -location "$(location)"
              deploymentMode: 'Incremental'
              deploymentName: 'SpoonTracker-$(environment)-$(Build.BuildId)'
              deploymentOutputs: 'deploymentOutputs'
          
          - task: AzurePowerShell@5
            displayName: 'Process Deployment Outputs'
            inputs:
              azureSubscription: '$(azureSubscription)'
              ScriptType: 'InlineScript'
              Inline: |
                $outputs = '$(deploymentOutputs)' | ConvertFrom-Json
                Write-Host "=== Deployment Outputs ==="
                $outputs.PSObject.Properties | ForEach-Object {
                  Write-Host "$($_.Name): $($_.Value.value)"
                  Write-Host "##vso[task.setvariable variable=$($_.Name);isOutput=true]$($_.Value.value)"
                }
              azurePowerShellVersion: 'LatestVersion'

- stage: DeployApplication
  displayName: 'Deploy Application'
  dependsOn: DeployInfrastructure
  condition: succeeded()
  variables:
    webAppName: '$(appName)-$(environment)-wa'
  jobs:
  - deployment: DeployApp
    displayName: 'Deploy to App Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: '$(environment)'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'SpoonTrackerApp-$(environment)'
          
          - script: |
              echo "🚀 Deploying to: $(webAppName)"
              echo "📦 Package: $(Pipeline.Workspace)/SpoonTrackerApp-$(environment)"
              ls -la "$(Pipeline.Workspace)/SpoonTrackerApp-$(environment)"
            displayName: 'Pre-deployment info'
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/SpoonTrackerApp-$(environment)'
              deploymentMethod: 'auto'
              takeAppOfflineFlag: true
              
          - task: AzureAppServiceSettings@1
            displayName: 'Configure App Settings'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(webAppName)'
              resourceGroupName: '$(resourceGroupName)'
              appSettings: |
                [
                  {
                    "name": "WEBSITE_TIME_ZONE",
                    "value": "Romance Standard Time"
                  },
                  {
                    "name": "ENVIRONMENT",
                    "value": "$(environment)"
                  },
                  {
                    "name": "BUILD_ID",
                    "value": "$(Build.BuildId)"
                  },
                  {
                    "name": "BRANCH_NAME",
                    "value": "$(Build.SourceBranchName)"
                  },
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "18-lts"
                  }
                ]

- stage: PostDeployment
  displayName: 'Post Deployment Tests'
  dependsOn: DeployApplication
  condition: succeeded()
  variables:
    webAppName: '$(appName)-$(environment)-wa'
    appUrl: 'https://$(webAppName).azurewebsites.net'
  jobs:
  - job: HealthCheck
    displayName: 'Health Check & Smoke Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "🏥 Starting health check for $(appUrl)"
        
        # Wait for app to be ready
        echo "⏳ Waiting 30 seconds for app to be ready..."
        sleep 30
        
        # Check if app is responding
        echo "🔍 Checking HTTP response..."
        response=$(curl -s -o /dev/null -w "%{http_code}" $(appUrl))
        
        if [ $response -eq 200 ]; then
          echo "✅ Health check passed - App is responding with HTTP $response"
        else
          echo "❌ Health check failed - HTTP Status: $response"
          curl -v $(appUrl) || true
          exit 1
        fi
        
        # Check if our app content is there
        echo "🔍 Checking app content..."
        if curl -s $(appUrl) | grep -q "Gestionnaire de Cuillères"; then
          echo "✅ Content check passed - App content found"
        else
          echo "❌ Content check failed - App content not found"
          echo "Response content:"
          curl -s $(appUrl) | head -20
          exit 1
        fi
        
        # Check JavaScript loading
        echo "🔍 Checking JavaScript resources..."
        if curl -s $(appUrl) | grep -q "app.js"; then
          echo "✅ JavaScript resources found"
        else
          echo "⚠️ JavaScript resources not found in HTML"
        fi
        
      displayName: 'Health Check'
    
    - script: |
        echo ""
        echo "🎉 =================================="
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "🎉 =================================="
        echo ""
        echo "🌐 App URL: $(appUrl)"
        echo "🏷️  Environment: $(environment)"
        echo "🔢 Build ID: $(Build.BuildId)"
        echo "🌿 Branch: $(Build.SourceBranchName)"
        echo "📅 Deployed: $(date)"
        echo ""
        echo "🔗 Quick Links:"
        echo "   • Application: $(appUrl)"
        echo "   • Azure Portal: https://portal.azure.com/#@/resource/subscriptions/{subscription}/resourceGroups/$(resourceGroupName)"
        echo ""
      displayName: 'Deployment Summary'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/health-check-results.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: always()
      continueOnError: true